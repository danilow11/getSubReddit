{"version":3,"sources":["Thumbnail.js","Time.js","Voting.js","RedditPost.js","ErrorMessage.js","Subreddit.js","RedditInput.js","App.js","index.js"],"names":["Thumbnail","post","is_self","className","thumbnail","alt","src","computeTimeString","time","isUnixTime","moment","unix","fromNow","Time","Voting","onUpvote","onDownvote","onClick","score","RedditPost","id","href","url","target","rel","title","created","permalink","num_comments","ErrorMessage","text","Subreddit","getThis","useState","posts","setPosts","errorMsg","setDisErrorMsg","useEffect","fetch","then","res","json","data","children","map","c","catch","error","console","handleUpvote","postId","prevPosts","postIndex","findIndex","copyPosts","handleDownvote","useMemo","sort","p1","p2","RedditInput","handleSubmit","inputValue","handleInputChange","buttonDisabled","onSubmit","value","onChange","e","required","disabled","App","setInputValue","subreddit","setSubreddit","setButtonDis","preventDefault","newValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.befc4f7b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Thumbnail = ({ post }) => {\r\n  if(post.is_self) {\r\n    return <span className=\"thumbnail self\"/>\r\n  } else if(post.thumbnail === 'default') {\r\n    return <span className=\"thumbnail default\"/>\r\n  } else {\r\n    return (\r\n      <img className=\"thumbnail\"\r\n        alt=\"thumbnail\"\r\n        src={post.thumbnail} />\r\n    );\r\n  }\r\n};\r\nThumbnail.propTypes = {\r\n  post: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Thumbnail;\r\n","import PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\n\r\nconst computeTimeString = (time, isUnixTime) => {\r\n  if(isUnixTime) {\r\n    return moment.unix(time).fromNow();\r\n  } else {\r\n    return moment(time).fromNow();\r\n  }\r\n}\r\n\r\nconst Time = ({ time, isUnixTime }) => {\r\n  return (\r\n    <span className=\"time\">\r\n      {computeTimeString(time, isUnixTime)}\r\n    </span>\r\n  );\r\n};\r\nTime.propTypes = {\r\n  time: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]).isRequired,\r\n  isUnixTime: PropTypes.bool\r\n};\r\n\r\nexport default Time;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Voting = ({ post, onUpvote, onDownvote }) => (\r\n  <div className=\"voting\">\r\n    <i className=\"fa fa-arrow-up\" onClick={onUpvote}/>\r\n    <div className=\"score\">{post.score}</div>\r\n    <i className=\"fa fa-arrow-down\" onClick={onDownvote}/>\r\n  </div>\r\n);\r\nVoting.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n  onUpvote: PropTypes.func.isRequired,\r\n  onDownvote: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Voting;\r\n","import PropTypes from 'prop-types';\r\nimport Thumbnail from './Thumbnail';\r\nimport Time from './Time';\r\nimport Voting from './Voting';\r\n\r\nfunction RedditPost({ post, onUpvote, onDownvote }) {\r\n  return (\r\n    <div className=\"reddit-post\">\r\n      <Voting post={post}\r\n        onUpvote={() => onUpvote(post.id)}\r\n        onDownvote={() => onDownvote(post.id)} />\r\n      <Thumbnail post={post}/>\r\n      <div className=\"content\">\r\n        <h3 className=\"title\">\r\n          <a href={post.url} target=\"_blank\" rel=\"noreferrer\">{post.title}</a>\r\n        </h3>\r\n        <div className=\"submitted\">\r\n          Submitted <Time time={post.created} isUnixTime={true}/>\r\n        </div>\r\n        <a className=\"comments\" href={`https://www.reddit.com${post.permalink}`} target=\"_blank\" rel=\"noreferrer\">\r\n          {post.num_comments} comments\r\n        </a>\r\n        <span className=\"action\">share</span>\r\n        <span className=\"action\">save</span>\r\n        <span className=\"action\">hide</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nRedditPost.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n  onUpvote: PropTypes.func.isRequired,\r\n  onDownvote: PropTypes.func.isRequired\r\n};\r\n\r\nexport default RedditPost;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst ErrorMessage = ({ text }) =>\r\n  <div className=\"error\">{text}</div>;\r\n\r\nErrorMessage.propTypes = {\r\n  text: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport RedditPost from './RedditPost';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nfunction Subreddit({ getThis }) {\r\n  const [posts, setPosts] = useState([]);\r\n  const [errorMsg, setDisErrorMsg] = useState(false);\r\n  const errorText = \"There was a problem trying to get the subreddit or it doesn't exist, please try again.\";\r\n\r\n  useEffect(() => {\r\n    fetch(`https://www.reddit.com/r/${getThis}.json`)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        if (json.data) {\r\n          setPosts(json.data.children.map(c => c.data));\r\n          setDisErrorMsg(false);\r\n        } else {\r\n          setDisErrorMsg(true);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setDisErrorMsg(true);\r\n        console.error(error);\r\n      });\r\n  }, [getThis, setPosts]);\r\n\r\n  const handleUpvote = postId => {\r\n    setPosts(prevPosts => {\r\n      const postIndex = prevPosts.findIndex(\r\n        post => post.id === postId\r\n      );\r\n\r\n      const copyPosts = [...prevPosts];\r\n      \r\n      copyPosts[postIndex] = {\r\n        ...copyPosts[postIndex],\r\n        score: copyPosts[postIndex].score + 1\r\n      };\r\n\r\n      return copyPosts;\r\n    });\r\n  };\r\n\r\n  const handleDownvote = postId => {\r\n    setPosts(prevPosts => {\r\n      const postIndex = prevPosts.findIndex(\r\n        post => post.id === postId\r\n      );\r\n\r\n      const copyPosts = [...prevPosts];\r\n      \r\n      copyPosts[postIndex] = {\r\n        ...copyPosts[postIndex],\r\n        score: copyPosts[postIndex].score - 1\r\n      };\r\n\r\n      return copyPosts;\r\n    });\r\n  };\r\n\r\n  const redditListing = useMemo(() => {\r\n    return errorMsg ?\r\n      <ErrorMessage text={errorText}/> :\r\n      <ul className=\"reddit-listing\">\r\n        {posts\r\n          .sort((p1, p2) => p2.score - p1.score)\r\n          .map(post =>\r\n            <li key={post.id}>\r\n              <RedditPost post={post}\r\n                onUpvote={handleUpvote}\r\n                onDownvote={handleDownvote}\r\n              />\r\n            </li>\r\n        )}\r\n      </ul>;\r\n  }, [posts, errorMsg]);\r\n\r\n  return redditListing;\r\n}\r\nSubreddit.propTypes = {\r\n  getThis: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Subreddit;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction RedditInput({ handleSubmit, inputValue,\r\n  handleInputChange, buttonDisabled }) {\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"reddit-form\">\r\n      <input\r\n        value={inputValue}\r\n        onChange={e => handleInputChange(e.target.value)}\r\n        required\r\n      />\r\n      <button disabled={buttonDisabled}>Get!</button>\r\n    </form>\r\n  );\r\n}\r\nRedditInput.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  handleInputChange: PropTypes.func.isRequired,\r\n  buttonDisabled: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default RedditInput;\r\n","import React, { useState } from 'react';\nimport Subreddit from './Subreddit';\nimport RedditInput from './RedditInput';\nimport './App.css';\n\nfunction App() {\n  const [inputValue, setInputValue] = useState('hardtailgang');\n  const [subreddit, setSubreddit] = useState(inputValue);\n  const [buttonDisabled, setButtonDis] = useState(false);\n\n  const handleInputChange = newValue => {\n    setInputValue(newValue);\n    setButtonDis(!newValue ? true : false);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (inputValue) {\n      setSubreddit(inputValue);\n    }\n  };\n\n  return (\n    <main className=\"App\">\n      <RedditInput\n        handleSubmit={handleSubmit}\n        inputValue={inputValue}\n        handleInputChange={handleInputChange}\n        buttonDisabled={buttonDisabled}\n      />\n      <Subreddit\n        getThis={subreddit}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}